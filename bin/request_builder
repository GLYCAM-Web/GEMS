#!/usr/bin/env python3
import argparse
import json
import os
import sys
from pathlib import Path


# append $GEMSHOME to sys path in case
# the script is run from outside the gemsModules directory
if "GEMSHOME" in os.environ:
    if os.environ["GEMSHOME"] not in sys.path:
        sys.path.append(os.environ["GEMSHOME"])
else:
    print("GEMSHOME not set. Exiting.")
    sys.exit(1)

from gemsModules.common.main_api_resources import Resource


def set_value_at_json_index(json_dict, json_index, value):
    """Using a jq-like index, set the value in a JSON dictionary.

    Presumes the existence of all keys in the index.
    """

    try:
        # Split the index into a list of keys
        json_index, resource_name = json_index.rsplit(".", 1)
        keys = json_index.split(".")

        # Traverse the JSON dictionary using the keys
        current_dict = json_dict
        for key in keys:
            current_dict = current_dict[key]

        # Set the value using the resource name
        current_dict[resource_name] = value

        return json_dict

    except KeyError:
        print(f"Invalid JSON index: {json_index}")
        return json_dict

    except Exception as e:
        print(f"An error occurred: {str(e)}")
        return json_dict


def insert_file_content_to_json(
    json_dict, json_index, resource_path, resource_format=None
):
    try:
        with open(resource_path, "r") as file:
            file_content = file.read()

        resource = Resource(
            locationType="Payload", resourceFormat=resource_format, payload=file_content
        )

        # Set the file content at the JSON index
        json_dict = set_value_at_json_index(json_dict, json_index, resource.dict())

        return json_dict

    except FileNotFoundError:
        print(f"File not found: {resource_path}")
        return json_dict


def main():
    parser = argparse.ArgumentParser(description="JSON Request Builder")
    parser.add_argument("--resource", type=str, help="Path to the resource file")

    # optional request flag instead of stdin
    parser.add_argument("--request", type=str, help="Path to the request file")
    # optional output flag instead of stdout
    parser.add_argument(
        "--output", type=str, help="Path to the output file", default=None
    )

    parser.add_argument(
        "--resource-format",
        type=str,
        help="The format of the resource file (e.g. 'json', 'xml')",
        default=None,
    )
    parser.add_argument(
        "--json-index",
        type=str,
        help="The index of the JSON object to be updated separated by periods",
    )
    args = parser.parse_args()

    resource_path = args.resource

    if resource_path:
        if not os.path.isfile(resource_path):
            print(f"Error: Resource file '{resource_path}' does not exist.")
            sys.exit(1)
    else:
        resource_path = None

    # Read the request from stdin
    request_data = sys.stdin.read()

    if not request_data:
        if args.request:
            with open(args.request, "r") as f:
                request_data = f.read()

    if request_data:
        try:
            request = json.loads(request_data)
        except json.JSONDecodeError:
            print("Error: Invalid JSON input.")
            sys.exit(1)
    else:
        print("Error: No request data provided via stdin or --request.")
        sys.exit(1)

    updated_request = insert_file_content_to_json(
        request, args.json_index, resource_path, args.resource_format
    )

    if args.output:
        with open(args.output, "w") as f:
            f.write(json.dumps(updated_request))
    else:
        print(json.dumps(updated_request), end="")


if __name__ == "__main__":
    main()
