digraph bigpicture {
  compound=true;
  rankdir=LR;

  node [ shape=star ]; // To make unspecified nodes obvious in the graph 

  // Objects that do not need Global Defines 
  Evaluate [ shape=octagon ];
  Options [ shape=octagon ];
  ReturnActions [ shape=octagon ];
  ReturnDryRun [ shape=octagon ];
  ReturnHelp [ shape=octagon ];
  ReturnOptions [ shape=octagon ];
  ReturnResponses [ shape=octagon ];
  ReturnSchema [ shape=octagon ];
  WebMetadata [ shape=octagon ];
  // Regular Objects (these need Global Defines) 
  Atom [ shape=octagon style=filled fillcolor="cadetblue2" ];
  Bond [ shape=octagon style=filled fillcolor="cadetblue2" ];
  Fragment [ shape=octagon style=filled fillcolor="cadetblue2" ];
  Geometry [ shape=octagon style=filled fillcolor="cadetblue2" ];
  Linkage [ shape=octagon style=filled fillcolor="cadetblue2" ];
  Molecule [ shape=octagon style=filled fillcolor="cadetblue2" ];
  Represent [ shape=octagon style=filled fillcolor="cadetblue2" ];
  Residue [ shape=octagon style=filled fillcolor="cadetblue2" ];
  Selection [ shape=octagon style=filled fillcolor="cadetblue2" ];
  Simulate [ shape=octagon style=filled fillcolor="cadetblue2" ];
  User [ shape=octagon style=filled fillcolor="cadetblue2" ];
  // Objects that have no defined role yet 
  Project [ shape=octagon style=filled fillcolor="khaki2" ];
  System [ shape=octagon style=filled fillcolor="khaki2" ];
  // Defined in the JSON Specs 
  IPAddress [ shape=parallelogram style="rounded" ];
  Time [ shape=parallelogram style="rounded" ];
  TimeLeft [ shape=parallelogram style="rounded" ];
  URI [ shape=parallelogram style="rounded" ];
  // Plain data (string, number, etc.) 
  AheadRunning [ shape=parallelogram ];
  AheadWaiting [ shape=parallelogram ];
  Date [ shape=parallelogram ];
  Directory [ shape=parallelogram ];
  EmailAddress [ shape=parallelogram ];
  File [ shape=parallelogram ];
  Format [ shape=parallelogram ];
  ID [ shape=parallelogram ];
  Label [ shape=parallelogram ];
  MD5Sum [ shape=parallelogram ];
  Name [ shape=parallelogram ];
  Path [ shape=parallelogram ];
  ResourceLocation [ shape=parallelogram ];
  SessionID [ shape=parallelogram ];
  Status [ shape=parallelogram ];
  Tags [ shape=parallelogram ];
  TextBlock [ shape=parallelogram ];
  Type [ shape=parallelogram ];
  Unit [ shape=parallelogram ];
  UserName [ shape=parallelogram ];
  UUID [ shape=parallelogram ];
  Value [ shape=parallelogram ];
  // Enum choices or similar 
  AND [ shape=rect style="rounded" ];
  Angle [ shape=rect style="rounded" ];
  Attachment [ shape=rect style="rounded" ];
  Conformation [ shape=rect style="rounded" ];
  Dihedral [ shape=rect style="rounded" ];
  Directory [ shape=rect style="rounded" ];
  Distance [ shape=rect style="rounded" ];
  File [ shape=rect style="rounded" ];
  NOT [ shape=rect style="rounded" ];
  OR [ shape=rect style="rounded" ];
  Path [ shape=rect style="rounded" ];
  RingPucker [ shape=rect style="rounded" ];
  Rotamer [ shape=rect style="rounded" ];
  SecondaryStructure [ shape=rect style="rounded" ];
  TextBlock [ shape=rect style="rounded" ];
  URI [ shape=rect style="rounded" ];
  XOR [ shape=rect style="rounded" ];
  // Enum Nodes 
  LogicGate [ shape=diamond ];
  GeometricProperty [ shape=diamond ];
  ResourceType [ shape=diamond ];
  // Nodes that are definitions 
  Resource [ shape=rect ];
  // Nodes that contain defs used by most Objects 
  GlobalDefines [ shape=rect style=filled fillcolor="cadetblue2" ];
  GlobalActions [ shape=rect style=filled fillcolor="cadetblue2" ];
  GlobalMetadata [ shape=rect style=filled fillcolor="cadetblue2" ];
  // Objects that need I/O info 
  InputSpec [ shape=octagon style=filled fillcolor="orchid1" ];
  OutputSpec [ shape=octagon style=filled fillcolor="orchid1" ];
  // Objects that need Global Defines and I/O info 
  AntibodyDocking [ shape=octagon style=filled fillcolor="cadetblue2:orchid1" ];
  Build [ shape=octagon style=filled fillcolor="cadetblue2:orchid1" ];
  GlycoComplex [ shape=octagon style=filled fillcolor="cadetblue2:orchid1" ];
  GlycoConjugate [ shape=octagon style=filled fillcolor="cadetblue2:orchid1" ];
  Image [ shape=octagon style=filled fillcolor="cadetblue2:orchid1" ];
  Job [ shape=octagon style=filled fillcolor="cadetblue2:orchid1" ];
  Sequence [ shape=octagon style=filled fillcolor="cadetblue2:orchid1" ];
  Text [ shape=octagon style=filled fillcolor="cadetblue2:orchid1" ];
  Fragment->Atom [ penwidth=1 ];
  Fragment->Residue [ penwidth=1 ];
  Molecule->Atom [ penwidth=1 ];
  Molecule->Residue [ penwidth=1 ];
  ResourceType->Attachment [ penwidth=1 ];
  ResourceType->Directory [ penwidth=1 ];
  ResourceType->File [ penwidth=1 ];
  ResourceType->Path [ penwidth=1 ];
  ResourceType->TextBlock [ penwidth=1 ];
  ResourceType->URI [ penwidth=1 ];
  Job->AheadRunning [ penwidth=1 ];
  Job->AheadWaiting [ penwidth=1 ];
  Job->Date [ penwidth=1 ];
  Job->Status [ penwidth=1 ];
  Job->Time [ penwidth=1 ];
  Job->TimeLeft [ penwidth=1 ];
  Job->WebMetadata [ penwidth=1 ];
  OutputSpec->Resource [ penwidth=1 ];
  InputSpec->Resource [ penwidth=1 ];
  Residue->Atom [ penwidth=1 ];
  GeometricProperty->Angle [ penwidth=1 ];
  GeometricProperty->Conformation [ penwidth=1 ];
  GeometricProperty->Dihedral [ penwidth=1 ];
  GeometricProperty->Distance [ penwidth=1 ];
  GeometricProperty->Rotamer [ penwidth=1 ];
  GeometricProperty->RingPucker [ penwidth=1 ];
  GeometricProperty->SecondaryStructure [ penwidth=1 ];
  AntibodyDocking->Build [ penwidth=1 ];
  WebMetadata->EmailAddress [ penwidth=1 ];
  WebMetadata->Date [ penwidth=1 ];
  WebMetadata->IPAddress [ penwidth=1 ];
  WebMetadata->SessionID [ penwidth=1 ];
  WebMetadata->Time [ penwidth=1 ];
  WebMetadata->User [ penwidth=1 ];
  WebMetadata->UserName [ penwidth=1 ];
  WebMetadata->UUID [ penwidth=1 ];
  Sequence->MD5Sum [ penwidth=1 ];
  LogicGate->AND [ penwidth=1 ];
  LogicGate->OR [ penwidth=1 ];
  LogicGate->XOR [ penwidth=1 ];
  LogicGate->NOT [ penwidth=1 ];
  GlycoComplex->AntibodyDocking [ penwidth=1 ];
  GlycoComplex->Build [ penwidth=1 ];
  Build->WebMetadata [ penwidth=1 ];
  GlobalDefines->GlobalActions [ penwidth=1 ];
  GlobalDefines->GlobalMetadata [ penwidth=1 ];
  GlobalActions->Evaluate [ penwidth=1 ];
  GlobalActions->Options [ penwidth=1 ];
  GlobalActions->ReturnActions [ penwidth=1 ];
  GlobalActions->ReturnDryRun [ penwidth=1 ];
  GlobalActions->ReturnHelp [ penwidth=1 ];
  GlobalActions->ReturnOptions [ penwidth=1 ];
  GlobalActions->ReturnResponses [ penwidth=1 ];
  GlobalActions->ReturnSchema [ penwidth=1 ];
  Geometry->GeometricProperty [ penwidth=1 ];
  Geometry->Selection [ penwidth=1 ];
  Geometry->Unit [ penwidth=1 ];
  Geometry->Value [ penwidth=1 ];
  Selection->LogicGate [ penwidth=1 ];
  Resource->ResourceLocation [ penwidth=1 ];
  Resource->ResourceType [ penwidth=1 ];
  GlycoConjugate->Build [ penwidth=1 ];
  GlobalMetadata->Format [ penwidth=1 ];
  GlobalMetadata->ID [ penwidth=1 ];
  GlobalMetadata->Label [ penwidth=1 ];
  GlobalMetadata->Name [ penwidth=1 ];
  GlobalMetadata->Tags [ penwidth=1 ];
  GlobalMetadata->Type [ penwidth=1 ];
  Linkage->Molecule [ penwidth=4 color="gray" style="dashed" ];
  Linkage->Residue [ penwidth=4 color="gray" style="dashed" ];
  Bond->Atom [ penwidth=4 color="gray" style="dashed" ];
  Fragment->Atom [ penwidth=4 style="dotted" ];
  Fragment->Residue [ penwidth=4 style="dotted" ];
  Molecule->Atom [ penwidth=4 style="dotted" ];
  Molecule->Residue [ penwidth=4 style="dotted" ];
  Represent->Image [ penwidth=4 style="dotted" ];
  Represent->Text [ penwidth=4 style="dotted" ];
  Residue->Atom [ penwidth=4 style="dotted" ];
  AntibodyDocking->Represent [ penwidth=4 style="dotted" ];
  AntibodyDocking->Sequence [ penwidth=4 style="dotted" ];
  Sequence->Build [ penwidth=4 style="dotted" ];
  Sequence->Geometry [ penwidth=4 style="dotted" ];
  Sequence->Represent [ penwidth=4 style="dotted" ];
  Sequence->Simulate [ penwidth=4 style="dotted" ];
  GlycoComplex->Represent [ penwidth=4 style="dotted" ];
  GlycoComplex->Sequence [ penwidth=4 style="dotted" ];
  GlycoComplex->Simulate [ penwidth=4 style="dotted" ];
  Selection->Atom [ penwidth=4 style="dotted" ];
  Selection->Bond [ penwidth=4 style="dotted" ];
  Selection->Fragment [ penwidth=4 style="dotted" ];
  Selection->Linkage [ penwidth=4 style="dotted" ];
  Selection->Molecule [ penwidth=4 style="dotted" ];
  Selection->Residue [ penwidth=4 style="dotted" ];
  Selection->Selection [ penwidth=4 style="dotted" ];
  Simulate->Job [ penwidth=4 style="dotted" ];
  GlycoConjugate->Represent [ penwidth=4 style="dotted" ];
  GlycoConjugate->Sequence [ penwidth=4 style="dotted" ];
  GlycoConjugate->Simulate [ penwidth=4 style="dotted" ];


  Label->InputSpec [ style=invis ];
  Label->OutputSpec [ style=invis ];

  subgraph cluster_0 {
    label="Nodes Legend"; 
  NoGlobalsObjectNodes [ shape=octagon label="Objects that do not need Global Defines" ];
  RegularObjectNodes [ shape=octagon style=filled fillcolor="cadetblue2" label="Regular Objects (these need Global Defines)" ];
  UnassignedObjectNodes [ shape=octagon style=filled fillcolor="khaki2" label="Objects that have no defined role yet" ];
  JSONInternalNodes [ shape=parallelogram style="rounded" label="Defined in the JSON Specs" ];
  DataNodes [ shape=parallelogram label="Plain data (string, number, etc.)" ];
  StubNodes [ shape=rect style="rounded" label="Enum choices or similar" ];
  EnumNodes [ shape=diamond label="Enum Nodes" ];
  DefinitionNodes [ shape=rect label="Nodes that are definitions" ];
  GlobalDefinitionNodes [ shape=rect style=filled fillcolor="cadetblue2" label="Nodes that contain defs used by most Objects" ];
  InputOutputObjectNodes [ shape=octagon style=filled fillcolor="orchid1" label="Objects that need I/O info" ];
  IOAndGlobalObjectNodes [ shape=octagon style=filled fillcolor="cadetblue2:orchid1" label="Objects that need Global Defines and I/O info" ];
  } 

  subgraph cluster_1 {
    label="Edges Legend"; 
  Multi1 [ shape=none style=invis ] ; 
  Multi2 [ shape=none style=invis ] ; 
  Multi1->Multi2 [ penwidth=4 style="dotted" label="Contains one or more" ] ; 
  Single1 [ shape=none style=invis ] ; 
  Single2 [ shape=none style=invis ] ; 
  Single1->Single2 [ penwidth=1 label="Contains one" ] ; 
  Double1 [ shape=none style=invis ] ; 
  Double2 [ shape=none style=invis ] ; 
  Double1->Double2 [ penwidth=4 color="gray" style="dashed" label="Contains two (total, no matter how many tails)" ] ; 
  } 

  DataNodes->Double1 [ style=invis ];

}
