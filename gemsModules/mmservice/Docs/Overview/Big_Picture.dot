digraph {
  compound="true";
  node [ shape = "rect" labelFontSize="12" fontName="Helvetica" ] ;
  edge [ labelfontsize="12" labelfontname="Helvetica" splines=false ];
  rankdir=LR;
  subgraph cluster0 {
    shape="rect";
    style="dashed, rounded";
    penwidth="3";
    color="gray";
    label="Upstream Process";
    jsonOrigin [shape="oval" label="Prepare\nJSON Input"];
  }
  subgraph cluster1 {
    label="MM Service, Stage 1";
    evaluateRequest [ label="Evaluate\nthe request" ] ;
    getRequirements [ shape="diamond" label="Determine\nJob Age" ] ;
    checkStatus [ label="Check Status" ];
    buildInput [ label="Build Input" ];
//    rank=same { evaluateRequest getRequirements buildInput buildBatch };
    rank=same { buildInput getRequirements checkStatus };
    evaluateRequest -> getRequirements;
    checkStatus -> getRequirements [style=invis];
    getRequirements -> checkStatus [label="Existing Job" tailport=se headport=e constraint=false];
    getRequirements -> buildInput [label="New Job" headport=w];
  }
  jsonOrigin -> evaluateRequest [ltail=cluster0 lhead=cluster1 label="Send to\nMM Service"];
//  checkStatus -> jsonOrigin [lhead=cluster0 label="Return\nStatus" constraint=false tailport=sw];
  subgraph cluster12 {
    shape="rect";
    style="dashed, rounded";
    penwidth="3";
    color="gray";
    label="Job runner\nBLACK BOX\nCurrently in Slurm's Receive";
    buildBatch [ label="Build Request\nfor Batch Compute" ];
    batchEnabled [ label="Batch Compute\nAppropriate??" ] ;
    runLocally [ label="Start\nJob Locally" ] ;
    rank=same { runLocally buildBatch };
    buildInput -> batchEnabled ;
//    runLocally -> buildBatch [style=invis];
    batchEnabled -> buildBatch [label="Yes"] ;
    batchEnabled -> runLocally [label="No"] ;
  }
  subgraph cluster2 {
    shape="rect";
    style="dashed, rounded";
    penwidth="3";
    color="gray";
    label="Batch Compute\nBLACK BOX\nCurrently in Slurm's Receive";
    dealWithJob [shape="oval" label="Figure where job goes;\nSend it there."];
  }
  buildBatch -> dealWithJob [lhead=cluster2 label="Send to Batch Compute\nFIRE AND FORGET" ];
  subgraph cluster3 {
    label="MM Service, Stage 2";
    evaluateEnvironment [ label="Evaluate the\njob environment" ] ;
    evaluateProgress [ label="Evaluate & Report\nJob Progress\nIf Multi-Stage"];
    recordFinal [ label="Record Final State"];
    rank=same { evaluateEnvironment evaluateProgress recordFinal};
    evaluateEnvironment -> evaluateProgress -> recordFinal;
  }
  runLocally -> evaluateEnvironment [lhead=cluster3 headport=sw xlabel="NOHUP &\nFIRE AND FORGET" ];
  dealWithJob -> evaluateEnvironment [ltail=cluster2 lhead=cluster3] ;
//  recordFinal -> dealWithJob [label="MM Service Done\n& Batch Compute\nJob Returns"
//                              style="dashed" constraint=false
//                              lhead=cluster2 ltail=cluster3];
}
