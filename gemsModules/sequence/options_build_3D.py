#!/usr/bin/env python3
from typing import Any 
from pydantic import BaseModel, Field
from gemsModules.sequence.options_geometry import TheGeometryOptions
from gemsModules.common.loggingConfig import *
import traceback


if loggers.get(__name__):
    pass
else:
    log = createLogger(__name__)

class TheSystemSolvationOptions(BaseModel):
    solvationStatus: str = Field(
        'Unsolvated',
        description="Unsolvated, To be solvated, Solvated, Not applicable"
    )
    ionStatus: str = Field(
        'No ions',
        description="No ions, Add ions, Contains ions."
    )

class TheBuildOptions(BaseModel):
    """Options for building 3D models"""
    # Generated by evaluation.  Used in builds.
    solvationOptions: TheSystemSolvationOptions = None  # Not yet handled.
    geometryOptions: TheGeometryOptions = None
    mdMinimize: bool = Field(
        True,
        title='Minimize structure using MD',
    )
    numberStructuresHardLimit: int = None  # Website or API calls will enforce 64
    # Set to -1 to get all of them (BEWARE!)

    def __init__(self, **data: Any):
        super().__init__(**data)

    def setGeometryOptions(self, validatedSequence: str):
        log.info("Setting geometryOptions in BuildOptions")
        log.debug("validatedSequence: " + validatedSequence)
        self.geometryOptions = TheGeometryOptions()
        self.geometryOptions.setLinkageRotamerInfo(validatedSequence)

    def getRotamerData(self):
        log.info("buildOptions.getRotamerDataOut was called")
        if self.geometryOptions is None:
            return None
        else:
            return self.geometryOptions.getRotamerData()

    def createRotamerData(self):
        log.info("Build Options.createRotamerDataOut was called")
        if self.geometryOptions is None:
            self.geometryOptions = TheGeometryOptions()
        self.geometryOptions.createRotamerData()


def generateSchema():
    print(TheBuildOptions.schema_json(indent=2))

if __name__ == "__main__":
    generateSchema()
